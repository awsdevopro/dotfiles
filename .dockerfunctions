#!/usr/bin/env bash
# Bash wrappers for docker run commands

export DOCKER_REPO_PREFIX=nmrony

#
# Helper Functions
#
dcleanup(){
  docker rm $(docker ps -aq 2>/dev/null) 2>/dev/null
  docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

del_stopped(){
  local name=$1
  local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

  if [[ "$state" == "false" ]]; then
    docker rm $name
  fi
}

is_running(){
  local name=$1
  local state=$(docker inspect --format "{{.State.Running}}" $name)
  return "$state"
}

relies_on(){
  local containers=$@

  for container in $containers; do
    local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

    if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "$container is not running, starting it for you."
      $container
    fi
  done
}

couchdb(){
  del_stopped couchdb
  local state=$(docker inspect --format "{{.State.Running}}" couchdb 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "couchdb server is not running, starting it for you."
    local COUCH_DB_ADMIN=${1:-root}
    local COUCH_DB_PASS=${2:-nmrony}
    # create new couchdb container
    docker run -it -d \
      -v ${DEV_ZONE}/storage/couchdb:/usr/local/var/lib/couchdb \
      -p 5984:5984 \
      -p 2049:2049 \
      -e COUCHDB_USER=${COUCH_DB_ADMIN} \
      -e COUCHDB_PASSWORD=${COUCH_DB_PASS} \
      -e VIRTUAL_HOST=couchdb.nmrony.docker \
      --net ronsvpn \
      --name couchdb \
      couchdb > /dev/null 2>&1
  else
    echo 'couchdb is already running'
  fi
}

mongodb(){
  del_stopped mongodb
  local state=$(docker inspect --format "{{.State.Running}}" mongodb 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "mongodb server is not running, starting it for you."
    docker run -it -d \
      -v ${DEV_ZONE}/storage/mongodb:/data/db \
      -p 27017:27017 \
      --net ronsvpn \
      --name mongodb \
      mvertes/alpine-mongo > /dev/null 2>&1
  else
    echo 'mongodb is already running'
  fi
}

mongo() {
  relies_on mongodb
  sleep 4s;
  docker exec -it mongodb mongo
}

sysdig() {
  del_stopped sysdig-container
  docker run -it \
    --name sysdig-container \
    --privileged \
    -v /var/run/docker.sock:/host/var/run/docker.sock \
    -v /dev:/host/dev \
    -v /proc:/host/proc:ro \
    -v /boot:/host/boot:ro \
    -v /lib/modules:/host/lib/modules:ro \
    -v /usr:/host/usr:ro \
    sysdig/sysdig
}

# creates an nginx config for a local route
nginx_config(){
  server=$1
  route=$2

  cat >${HOME}/.nginx/conf.d/${server}.conf <<-EOF
  upstream ${server} { server ${route}; }
  server {
    server_name ${server};
    location / {
      proxy_pass  http://${server};
      proxy_http_version 1.1;
      proxy_set_header Upgrade \$http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host \$http_host;
      proxy_set_header X-Forwarded-Proto \$scheme;
      proxy_set_header X-Forwarded-For \$remote_addr;
      proxy_set_header X-Forwarded-Port \$server_port;
      proxy_set_header X-Request-Start \$msec;
    }
  }
  EOF

  # restart nginx
  docker restart nginx

  # add host to /etc/hosts
  sudo hostess add $server 127.0.0.1

  # open browser
  browser-exec "http://${server}"
}


aws(){
  docker run -it --rm \
    -v $HOME/.aws:/root/.aws \
    --log-driver none \
    --name aws \
    ${DOCKER_REPO_PREFIX}/awscli "$@"
}

bees(){
  docker run -it --rm \
    -e NOTARY_TOKEN \
    -v $HOME/.bees:/root/.bees \
    -v $HOME/.boto:/root/.boto \
    -v $HOME/.dev:/root/.ssh:ro \
    --log-driver none \
    --name bees \
    ${DOCKER_REPO_PREFIX}/beeswithmachineguns "$@"
}

cadvisor(){
  docker run -d \
    --restart always \
    -v /:/rootfs:ro \
    -v /var/run:/var/run:rw \
    -v /sys:/sys:ro  \
    -v /var/lib/docker/:/var/lib/docker:ro \
    -p 1234:8080 \
    --name cadvisor \
    google/cadvisor

  sudo hostess add cadvisor $(docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" cadvisor)
  browser-exec "http://cadvisor:8080"
}
